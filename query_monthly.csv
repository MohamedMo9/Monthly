SELECT case when QUEUE_NAME in ( 'Voice - English - Australia', 'Voice - English - Indonesia', 'Voice - English - Japan', 'Voice - English - New Zealand', 'Voice - English - Singapore' ) then 'APAC Combined' else QUEUE_NAME end as QName, ( TO_CHAR( DATE_TRUNC( 'month', convert_timezone( 'UTC',case when QUEUE_NAME in ('APAC Combined') then 'Asia/Singapore' else queue_data.queue__tz_database_name end, lookup_contact_calls.Start_Time ) ), 'YYYY-MM' ) ) AS MonthName, COUNT(*) AS Calls_Count, sum( case when lookup_contact_calls.flag_abandoned = 1 then 1 else 0 end ) as aban, sum( case when lookup_contact_calls.flag_handled + lookup_contact_calls.flag_abandoned = 1 then 1 else null end ) as tot_for_abn, sum( case when lookup_contact_calls.Waiting_time_sec <= 45 then 1 else 0 end ) AS ans_45_sec, sum( case when lookup_contact_calls.Waiting_time_sec <= 15 then 1 else 0 end ) AS ans_15_sec, AVG(lookup_contact_calls.Talking_time_sec / 60) AS Talking_time, AVG(lookup_contact_calls.After_work_time_sec / 60) AS Wrap_time FROM REPORTS.LOOKUP_CONTACT_CALLS AS lookup_contact_calls left join RPT_CS_DATA.source_contact_forecast__cs_queue_open_hours as queue_data on lookup_contact_calls.QUEUE_NAME = queue_data.queue__queue_name WHERE ( case when lookup_contact_calls.flag_call_in = 1 then true when lookup_contact_calls.flag_call_in = 0 then false end ) AND ( NOT ( case when lookup_contact_calls.flag_service_closed = 1 then true when lookup_contact_calls.flag_service_closed = 0 then false end ) OR ( case when lookup_contact_calls.flag_service_closed = 1 then true when lookup_contact_calls.flag_service_closed = 0 then false end ) IS NULL ) AND ( ( ( convert_timezone( 'UTC',case when QUEUE_NAME in ('APAC Combined') then 'Asia/Singapore' else queue_data.queue__tz_database_name end, lookup_contact_calls.Start_Time ) ) >= ( ( DATEADD('month', -3, DATE_TRUNC('month', CURRENT_DATE())) ) ) AND ( convert_timezone( 'UTC',case when QUEUE_NAME in ('APAC Combined') then 'Asia/Singapore' else queue_data.queue__tz_database_name end, lookup_contact_calls.Start_Time ) ) < ( ( DATEADD( 'month', 3, DATEADD('month', -3, DATE_TRUNC('month', CURRENT_DATE())) ) ) ) ) ) GROUP BY ( DATE_TRUNC( 'month', convert_timezone( 'UTC',case when QUEUE_NAME in ('APAC Combined') then 'Asia/Singapore' else queue_data.queue__tz_database_name end, lookup_contact_calls.Start_Time ) ) ), 1 ORDER BY 2 DESC
SELECT ( TO_CHAR( DATE_TRUNC( 'month', cs_twilio_chat_summary."CHAT_STARTED_AT" ), 'YYYY-MM' ) ) AS MonthName, case when cs_twilio_chat_summary."QUEUE" = 'English - Australia' or cs_twilio_chat_summary."QUEUE" = 'English - APAC' then 'APAC Chats' else cs_twilio_chat_summary."QUEUE" end AS QName, COUNT(DISTINCT cs_twilio_chat_summary."CHAT_ID") AS Chat_Count, sum( case when cs_twilio_chat_summary."IS_ABANDONED_FLAG" = true then 1 else 0 end ) as aban_chats, sum( case when coalesce( cs_twilio_chat_summary.chat_id, cs_twilio_chat_summary.task_sid ) is not null then 1 else null end ) AS tot_for_abn, count( case when ( cs_twilio_chat_summary."CHAT_QUEUE_TIME_SEC" + cs_twilio_chat_summary."CHAT_AGENT_QUEUE_TIME_SEC" ) <= 60 then 1 else null end ) as ans_on_time_60_sec FROM "REPORTS"."CS_TWILIO_CHAT_SUMMARY" AS cs_twilio_chat_summary WHERE ( ( (cs_twilio_chat_summary."CHAT_STARTED_AT") >= ( ( DATEADD('month', -3, DATE_TRUNC('month', CURRENT_DATE())) ) ) AND (cs_twilio_chat_summary."CHAT_STARTED_AT") < ( ( DATEADD( 'month', 3, DATEADD('month', -3, DATE_TRUNC('month', CURRENT_DATE())) ) ) ) ) ) and QName not ilike '%Screening%' GROUP BY ( DATE_TRUNC( 'month', cs_twilio_chat_summary."CHAT_STARTED_AT" ) ), 2 ORDER BY 1 DESC
SELECT ( TO_CHAR( DATE_TRUNC( 'month', cs_twilio_chat_summary."CHAT_STARTED_AT" ), 'YYYY-MM' ) ) AS MonthName, lookup_agent_hours.EMPLOYEE__TEAM_LEAD_EMAIL AS Lead, AVG( contact_agent_handle_times."AGENT_NET_HANDLING_TIME_SEC" / 60 ) AS AHT FROM "REPORTS"."CS_TWILIO_CHAT_SUMMARY" AS cs_twilio_chat_summary LEFT JOIN "REPORTS"."CONTACT_AGENT_HANDLE_TIMES" AS contact_agent_handle_times ON (cs_twilio_chat_summary."CHAT_ID") = (contact_agent_handle_times."CONTACT_ID") left join RPT_CS_DATA.ANALYTICAL_AGENT_INFO__EMPLOYEE_DETAILS_AND_CHANGES_DAILY on cs_twilio_chat_summary.AGENT_EMAIL = RPT_CS_DATA.ANALYTICAL_AGENT_INFO__EMPLOYEE_DETAILS_AND_CHANGES_DAILY.EMPLOYEE__EMAIL LEFT JOIN rpt_cs_data.analytical_schedule__all_shifts AS lookup_agent_hours ON lookup_agent_hours.employee__email = lower((lower(cs_twilio_chat_summary."AGENT_EMAIL"))) and lookup_agent_hours.shift_start_time = ( TO_CHAR( DATE_TRUNC( 'minute', DATE_TRUNC( 'minute', TIMESTAMPADD( MINUTE, -( MOD( EXTRACT( MINUTE FROM TO_TIMESTAMP_NTZ(cs_twilio_chat_summary."CHAT_AGENT_STARTED_AT") ), 30 ) ), TO_TIMESTAMP_NTZ(cs_twilio_chat_summary."CHAT_AGENT_STARTED_AT") ) ) ), 'YYYY-MM-DD HH24:MI' ) ) WHERE ( ( (cs_twilio_chat_summary."CHAT_STARTED_AT") >= ( ( DATEADD('month', -3, DATE_TRUNC('month', CURRENT_DATE())) ) ) AND (cs_twilio_chat_summary."CHAT_STARTED_AT") < ( ( DATEADD( 'month', 3, DATEADD('month', -3, DATE_TRUNC('month', CURRENT_DATE())) ) ) ) ) ) and EMPLOYEE__REPORT_DT = ( select max(EMPLOYEE__REPORT_DT) from RPT_CS_DATA.ANALYTICAL_AGENT_INFO__EMPLOYEE_DETAILS_AND_CHANGES_DAILY ) GROUP BY ( DATE_TRUNC( 'month', cs_twilio_chat_summary."CHAT_STARTED_AT" ) ), 2 ORDER BY 1 DESC
SELECT ( TO_CHAR( DATE_TRUNC('month', zendesk_report_desk_case."CREATED_AT"), 'YYYY-MM' ) ) AS MonthName, case when zendesk_report_desk_case."GROUP_NAME" is NULL then NULL else trim(zendesk_report_desk_case."GROUP_NAME") end AS "zendesk_report_desk_case.group_name", COUNT(DISTINCT zendesk_report_desk_case."TICKET_ID") AS GroupName, sum( case when zendesk_tickets_extra_info.ticket_first_response BETWEEN 0 and 54000 THEN 1 else 0 end ) as ans_15_hours, sum( case when zendesk_tickets_extra_info.ticket_first_response > 0 then 1 else Null end ) AS first_response_tickets, sum( case when zendesk_tickets_extra_info.ticket_resolution BETWEEN 0 and 86400 THEN 1 else null end ) as ans_24_hrs, sum( case when zendesk_tickets_extra_info.ticket_resolution > 0 then 1 else Null end ) AS total_ans FROM REPORTS.ZENDESK_tickets AS zendesk_report_desk_case LEFT JOIN REPORTS.ZENDESK_TICKETS_EXTRA_INFO AS zendesk_tickets_extra_info ON (zendesk_report_desk_case."TICKET_ID") = (zendesk_tickets_extra_info."TICKET_ID") WHERE ( ( (zendesk_report_desk_case."CREATED_AT") >= ( ( DATEADD('month', -3, DATE_TRUNC('month', CURRENT_DATE())) ) ) AND (zendesk_report_desk_case."CREATED_AT") < ( ( DATEADD( 'month', 3, DATEADD('month', -3, DATE_TRUNC('month', CURRENT_DATE())) ) ) ) ) ) AND ( ( UPPER( ( case when zendesk_report_desk_case."GROUP_NAME" in ( 'Agent IS (Log In, Verification, How It Works, Acct Mgmt, Other)', 'CS Czech & Slovak', 'CS English General ', 'CS French', 'CS German', 'CS HAT', 'CS Hungarian', 'CS Italian', 'CS Polish', 'CS Romanian', 'CS Russian', 'CS Spanish', 'CS Turkish', 'CS Ukranian', 'cs general', 'z [don''t assign] IS (Balances, Plastic, Pricing)', 'z [don''t assign] IS (Transfer Status, Edit Transfer, Payment)', 'z [don''t assign] IS Business 1 (WMM, Balances, Edit)', 'z [don''t assign] IS Business 2 (Verify, Account Mgmt)' ) OR zendesk_report_desk_case."GROUP_NAME" ilike 'CS%' then 'CS' when zendesk_report_desk_case."GROUP_NAME" ilike 'Ops%' then 'Ops' when zendesk_report_desk_case."GROUP_NAME" ilike 'Verification%' then 'Verification' else zendesk_report_desk_case."GROUP_NAME" end ) ) = UPPER('CS') ) ) AND ( case when zendesk_tickets_extra_info.real_contact = 1 then TRUE when zendesk_tickets_extra_info.real_contact = 0 then FALSE else NULL end ) AND ( case when zendesk_tickets_extra_info.started_by_cst = 1 then TRUE when zendesk_tickets_extra_info.started_by_cst = 0 then FALSE else NULL end ) GROUP BY ( DATE_TRUNC('month', zendesk_report_desk_case."CREATED_AT") ), 2 ORDER BY 1 DESC
select to_char(date_trunc(month, DATE_HOUR), 'YYYY-MM') as MonthName, GROUP_QUEUE_NAME as QName, sum(HANDLING_TIME) as HT, sum(SCHEDULED_HOURS) as Sch_Hrs, CHANNEL_TYPE as Channel from REPORTS.CS_ADHERENCE_OCCUPANCY where date_trunc(month, DATE_HOUR) >= ( ( DATEADD('month', -3, DATE_TRUNC('month', CURRENT_DATE())) ) ) AND date_trunc(month, DATE_HOUR) < ( ( DATEADD( 'month', 3, DATEADD('month', -3, DATE_TRUNC('month', CURRENT_DATE())) ) ) ) group by 1, 2, 5 order by 1 desc
SELECT ( TO_CHAR( DATE_TRUNC( 'month', zendesk_report_comments.comment_created_at ), 'YYYY-MM' ) ) AS MonthName, case when zendesk_report_desk_case."GROUP_NAME" is NULL then NULL else trim(zendesk_report_desk_case."GROUP_NAME") end AS GroupName, AVG( zendesk_audit_handling_time.total_handling_time / 60 ) AS AHT FROM REPORTS.ZENDESK_tickets AS zendesk_report_desk_case LEFT JOIN reports.zendesk_comments AS zendesk_report_comments ON (zendesk_report_desk_case."TICKET_ID") = zendesk_report_comments.ticket_id LEFT JOIN REPORTS.ZENDESK_TICKETS_EXTRA_INFO AS zendesk_tickets_extra_info ON (zendesk_report_desk_case."TICKET_ID") = (zendesk_tickets_extra_info."TICKET_ID") LEFT JOIN REPORTS.AUDIT_AND_COMMENT_HANDLING_TIME AS zendesk_audit_handling_time ON zendesk_report_comments.comment_id = zendesk_audit_handling_time.comment_id WHERE ( ( (zendesk_report_comments.comment_created_at) >= ( ( DATEADD('month', -3, DATE_TRUNC('month', CURRENT_DATE())) ) ) AND (zendesk_report_comments.comment_created_at) < ( ( DATEADD( 'month', 3, DATEADD('month', -3, DATE_TRUNC('month', CURRENT_DATE())) ) ) ) ) ) AND ( ( UPPER((zendesk_report_comments.channel)) = UPPER('EMAIL') ) ) AND ( case when zendesk_tickets_extra_info.real_contact = 1 then TRUE when zendesk_tickets_extra_info.real_contact = 0 then FALSE else NULL end ) AND ( case when zendesk_tickets_extra_info.started_by_cst = 1 then TRUE when zendesk_tickets_extra_info.started_by_cst = 0 then FALSE else NULL end ) GROUP BY ( DATE_TRUNC( 'month', zendesk_report_comments.comment_created_at ) ), 2 ORDER BY 1 DESC
SELECT ( TO_CHAR( DATE_TRUNC('month', lookup_agent_hours.SHIFT_START_TIME), 'YYYY-MM' ) ) AS MonthName, case when QUEUE_NAME in ( 'Voice - English - Australia', 'Voice - English - Indonesia', 'Voice - English - Japan', 'Voice - English - New Zealand', 'Voice - English - Singapore' ) then 'APAC Combined' else QUEUE_NAME end as QName, COUNT( DISTINCT CASE WHEN ( lookup_agent_contacts_summarized.channel_type = 'Phones' ) AND ( lookup_agent_contacts_summarized.missed_contact = 'no' ) THEN lookup_agent_contacts_summarized.contact_id ELSE NULL END ) as ans_transactions, CASE WHEN COALESCE( CAST( ( SUM( DISTINCT ( CAST( FLOOR( COALESCE((lookup_agent_hours.phone_hours), 0) *(1000000 * 1.0) ) AS DECIMAL(38, 0) ) ) + ( TO_NUMBER( MD5((lookup_agent_hours.distinct_table_key)), 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX' ) % 1.0e27 ) :: NUMERIC(38, 0) ) - SUM( DISTINCT ( TO_NUMBER( MD5((lookup_agent_hours.distinct_table_key)), 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX' ) % 1.0e27 ) :: NUMERIC(38, 0) ) ) AS DOUBLE PRECISION ) / CAST((1000000 * 1.0) AS DOUBLE PRECISION), 0 ) = 0 THEN 1 ELSE COALESCE( CAST( ( SUM( DISTINCT ( CAST( FLOOR( COALESCE(lookup_agent_hours.phone_hours, 0) *(1000000 * 1.0) ) AS DECIMAL(38, 0) ) ) + ( TO_NUMBER( MD5(lookup_agent_hours.distinct_table_key), 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX' ) % 1.0e27 ) :: NUMERIC(38, 0) ) - SUM( DISTINCT ( TO_NUMBER( MD5(lookup_agent_hours.distinct_table_key), 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX' ) % 1.0e27 ) :: NUMERIC(38, 0) ) ) AS DOUBLE PRECISION ) / CAST((1000000 * 1.0) AS DOUBLE PRECISION), 0 ) END AS Hrs_sch FROM RPT_CS_DATA.ANALYTICAL_SCHEDULE__ALL_SHIFTS AS lookup_agent_hours LEFT JOIN REPORTS.LOOKUP_AGENT_CONTACTS_SUMMARIZED AS lookup_agent_contacts_summarized ON lookup_agent_hours.EMPLOYEE__EMAIL = lookup_agent_contacts_summarized.AGENT_EMAIL AND lookup_agent_hours.SHIFT_START_TIME = lookup_agent_contacts_summarized.CONTACT_START_HOURPART LEFT JOIN REPORTS.LOOKUP_CONTACT_CALLS AS lookup_contact_calls ON lookup_agent_contacts_summarized.CONTACT_ID = lookup_contact_calls.CALL_ID AND lookup_agent_contacts_summarized.AGENT_EMAIL = lookup_contact_calls.AGENT_EMAIL WHERE lookup_agent_hours.CHANNEL_TYPE = 'phone' AND lookup_agent_hours.EMPLOYEE__DEPARTMENT = 'cs' AND ( case when lookup_agent_hours.employee__active_status is NULL then FALSE ELSE TRUE END ) AND ( ( (lookup_agent_hours.SHIFT_START_LOCAL_TIME) >= ( ( DATEADD('month', -3, DATE_TRUNC('month', CURRENT_DATE())) ) ) AND (lookup_agent_hours.SHIFT_START_LOCAL_TIME) < ( ( DATEADD( 'month', 3, DATEADD('month', -3, DATE_TRUNC('month', CURRENT_DATE())) ) ) ) ) ) GROUP BY ( DATE_TRUNC('month', lookup_agent_hours.SHIFT_START_TIME) ), 2 ORDER BY 1 DESC
SELECT ( TO_CHAR( DATE_TRUNC('month', lookup_agent_hours.SHIFT_START_TIME), 'YYYY-MM' ) ) AS MonthName, GROUP_NAME as GName, COUNT( DISTINCT CASE WHEN ( lookup_agent_contacts_summarized.channel_type = 'Chat' ) AND ( lookup_agent_contacts_summarized.missed_contact = 'no' ) THEN lookup_agent_contacts_summarized.contact_id ELSE NULL END ) as chat_count, CASE WHEN COALESCE( CAST( ( SUM( DISTINCT ( CAST( FLOOR( COALESCE((lookup_agent_hours.chat_hours), 0) *(1000000 * 1.0) ) AS DECIMAL(38, 0) ) ) + ( TO_NUMBER( MD5((lookup_agent_hours.distinct_table_key)), 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX' ) % 1.0e27 ) :: NUMERIC(38, 0) ) - SUM( DISTINCT ( TO_NUMBER( MD5((lookup_agent_hours.distinct_table_key)), 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX' ) % 1.0e27 ) :: NUMERIC(38, 0) ) ) AS DOUBLE PRECISION ) / CAST((1000000 * 1.0) AS DOUBLE PRECISION), 0 ) = 0 THEN 1 ELSE COALESCE( CAST( ( SUM( DISTINCT ( CAST( FLOOR( COALESCE(lookup_agent_hours.chat_hours, 0) *(1000000 * 1.0) ) AS DECIMAL(38, 0) ) ) + ( TO_NUMBER( MD5(lookup_agent_hours.distinct_table_key), 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX' ) % 1.0e27 ) :: NUMERIC(38, 0) ) - SUM( DISTINCT ( TO_NUMBER( MD5(lookup_agent_hours.distinct_table_key), 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX' ) % 1.0e27 ) :: NUMERIC(38, 0) ) ) AS DOUBLE PRECISION ) / CAST((1000000 * 1.0) AS DOUBLE PRECISION), 0 ) END AS sch_hrs FROM RPT_CS_DATA.ANALYTICAL_SCHEDULE__ALL_SHIFTS AS lookup_agent_hours LEFT JOIN REPORTS.LOOKUP_AGENT_CONTACTS_SUMMARIZED AS lookup_agent_contacts_summarized ON lookup_agent_hours.EMPLOYEE__EMAIL = lookup_agent_contacts_summarized.AGENT_EMAIL AND lookup_agent_hours.SHIFT_START_TIME = lookup_agent_contacts_summarized.CONTACT_START_HOURPART WHERE ( case when lookup_agent_hours.hours_worked is not NULL then TRUE else FALSE end ) AND ( lookup_agent_hours.EMPLOYEE__DEPARTMENT IS NULL OR lookup_agent_hours.EMPLOYEE__DEPARTMENT <> 'Fraud' ) AND ( ( (lookup_agent_hours.SHIFT_START_LOCAL_TIME) >= ( ( DATEADD('month', -3, DATE_TRUNC('month', CURRENT_DATE())) ) ) AND (lookup_agent_hours.SHIFT_START_LOCAL_TIME) < ( ( DATEADD( 'month', 3, DATEADD('month', -3, DATE_TRUNC('month', CURRENT_DATE())) ) ) ) ) ) AND lookup_agent_hours.CHAT_HOURS < 100000 and CHAT_HOURS > 0 GROUP BY ( DATE_TRUNC('month', lookup_agent_hours.SHIFT_START_TIME) ), 2 ORDER BY 1 DESC
SELECT ( TO_CHAR( DATE_TRUNC('month', lookup_agent_hours.SHIFT_START_TIME), 'YYYY-MM' ) ) AS MonthName, EMPLOYEE__TEAM_LEAD_EMAIL, COUNT( DISTINCT CASE WHEN ( lookup_agent_contacts_summarized.channel_type = 'Chat' ) AND ( lookup_agent_contacts_summarized.missed_contact = 'no' ) THEN lookup_agent_contacts_summarized.contact_id ELSE NULL END ) ans_transactions, CASE WHEN COALESCE( CAST( ( SUM( DISTINCT ( CAST( FLOOR( COALESCE((lookup_agent_hours.chat_hours), 0) *(1000000 * 1.0) ) AS DECIMAL(38, 0) ) ) + ( TO_NUMBER( MD5((lookup_agent_hours.distinct_table_key)), 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX' ) % 1.0e27 ) :: NUMERIC(38, 0) ) - SUM( DISTINCT ( TO_NUMBER( MD5((lookup_agent_hours.distinct_table_key)), 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX' ) % 1.0e27 ) :: NUMERIC(38, 0) ) ) AS DOUBLE PRECISION ) / CAST((1000000 * 1.0) AS DOUBLE PRECISION), 0 ) = 0 THEN 1 ELSE COALESCE( CAST( ( SUM( DISTINCT ( CAST( FLOOR( COALESCE(lookup_agent_hours.chat_hours, 0) *(1000000 * 1.0) ) AS DECIMAL(38, 0) ) ) + ( TO_NUMBER( MD5(lookup_agent_hours.distinct_table_key), 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX' ) % 1.0e27 ) :: NUMERIC(38, 0) ) - SUM( DISTINCT ( TO_NUMBER( MD5(lookup_agent_hours.distinct_table_key), 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX' ) % 1.0e27 ) :: NUMERIC(38, 0) ) ) AS DOUBLE PRECISION ) / CAST((1000000 * 1.0) AS DOUBLE PRECISION), 0 ) END AS Sch_Hrs FROM RPT_CS_DATA.ANALYTICAL_SCHEDULE__ALL_SHIFTS AS lookup_agent_hours LEFT JOIN REPORTS.LOOKUP_AGENT_CONTACTS_SUMMARIZED AS lookup_agent_contacts_summarized ON lookup_agent_hours.EMPLOYEE__EMAIL = lookup_agent_contacts_summarized.AGENT_EMAIL AND lookup_agent_hours.SHIFT_START_TIME = lookup_agent_contacts_summarized.CONTACT_START_HOURPART WHERE ( case when lookup_agent_hours.hours_worked is not NULL then TRUE else FALSE end ) AND ( lookup_agent_hours.EMPLOYEE__DEPARTMENT IS NULL OR lookup_agent_hours.EMPLOYEE__DEPARTMENT <> 'Fraud' ) AND ( ( (lookup_agent_hours.SHIFT_START_LOCAL_TIME) >= ( ( DATEADD('month', -3, DATE_TRUNC('month', CURRENT_DATE())) ) ) AND (lookup_agent_hours.SHIFT_START_LOCAL_TIME) < ( ( DATEADD( 'month', 3, DATEADD('month', -3, DATE_TRUNC('month', CURRENT_DATE())) ) ) ) ) ) GROUP BY ( DATE_TRUNC('month', lookup_agent_hours.SHIFT_START_TIME) ), 2 ORDER BY 1 DESC
WITH cs_twilio_parallel_chats AS ( with time_table as ( SELECT to_timestamp( ROW_NUMBER() OVER ( ORDER BY seq8() ) - 1 ) as tt FROM table (generator(rowcount => 86400)) ), parallel_chat_base as ( select CHAT_ID, TICKET_ID, CHAT_AGENT_STARTED_AT, CHAT_ENDED_AT, QUEUE, AGENT_NAME, AGENT_EMAIL from REPORTS.cs_twilio_chat_summary where agent_email is not Null ) /*  Query start  */ select agent_schedule_timestamp, agent_email, agent_name, team_lead, start_date, channel_name, channel_type, queue, mins_worked, count_chats_total, case when count_chats_total = 0 then '1) idle' when count_chats_total = 1 then '2) single' when count_chats_total = 2 then '3) double' else '4) multiple' end agent_time_category_total, count_chats_queue, case when count_chats_queue = 0 then '1) idle' when count_chats_queue = 1 then '2) single' when count_chats_queue = 2 then '3) double' else '4) multiple' end agent_time_category_queue from ( select distinct agent_schedule_timestamp, agent_time_table.agent_email, agent_time_table.agent_name, agent_time_table.team_lead, agent_time_table.start_date, channel_name, channel_type, queue, mins_worked, count(distinct CHAT_ID) over ( partition by agent_schedule_timestamp, agent_time_table.agent_email, agent_time_table.agent_name, channel_name, channel_type, queue ) count_chats_queue, count(distinct CHAT_ID) over ( partition by agent_schedule_timestamp, agent_time_table.agent_email, agent_time_table.agent_name, channel_name, channel_type ) count_chats_total from parallel_chat_base full outer join ( select timestamp_ntz_from_parts(day_date, fill_time) as agent_schedule_timestamp, AGENT_EMAIL, AGENT_NAME, TEAM_LEAD, START_DATE, CHANNEL_NAME, CHANNEL_TYPE, MINS_WORKED from ( select TO_DATE(THE_HOURPART) day_date, TO_TIME(THE_HOURPART) time_start, dateadd(mins, 30, TO_TIME(THE_HOURPART)) time_end, THE_HOURPART, AGENT_EMAIL, AGENT_NAME, TEAM_LEAD, START_DATE, CHANNEL_NAME, CHANNEL_TYPE, 1 as MINS_WORKED from reports.LOOKUP_AGENT_HOURS where THE_HOURPART >= '2020-02-18' and THE_HOURPART < current_date and CHANNEL_TYPE = 'Chat' and CHANNEL_NAME not ilike 'chatmaster%' ) t1 left join ( SELECT to_time(tt) fill_time FROM time_table where tt < '1970-01-02' and date_part(second, tt) = 0 ) t2 on t1.time_start <= t2.fill_time and t1.time_end > t2.fill_time ) agent_time_table on parallel_chat_base.AGENT_EMAIL = agent_time_table.AGENT_EMAIL and parallel_chat_base.CHAT_AGENT_STARTED_AT <= agent_time_table.agent_schedule_timestamp and parallel_chat_base.CHAT_ENDED_AT >= agent_time_table.agent_schedule_timestamp where agent_schedule_timestamp is not null ) ) SELECT ( TO_CHAR( DATE_TRUNC( 'month', cs_twilio_parallel_chats."AGENT_SCHEDULE_TIMESTAMP" ), 'YYYY-MM' ) ) AS "cs_twilio_parallel_chats.agent_schedule_timestamp_month", cs_twilio_parallel_chats."QUEUE" AS "cs_twilio_parallel_chats.queue", AVG( CASE WHEN ( cs_twilio_parallel_chats."COUNT_CHATS_TOTAL" > 0 ) THEN cs_twilio_parallel_chats."COUNT_CHATS_TOTAL" ELSE NULL END ) AS "cs_twilio_parallel_chats.avg_concurrency" FROM cs_twilio_parallel_chats WHERE ( ( ( cs_twilio_parallel_chats."AGENT_SCHEDULE_TIMESTAMP" ) >= ( ( DATEADD('month', -3, DATE_TRUNC('month', CURRENT_DATE())) ) ) AND ( cs_twilio_parallel_chats."AGENT_SCHEDULE_TIMESTAMP" ) < ( ( DATEADD( 'month', 3, DATEADD('month', -3, DATE_TRUNC('month', CURRENT_DATE())) ) ) ) ) ) GROUP BY ( DATE_TRUNC( 'month', cs_twilio_parallel_chats."AGENT_SCHEDULE_TIMESTAMP" ) ), 2 ORDER BY 1 DESC